#!/usr/bin/perl
use strict;
use integer;

use lib '../lib';

use Foswiki::Net;
use Foswiki::Plugins::FormQueryPlugin::WebDB;
use Foswiki::Plugins::ActionTrackerPlugin::ActionNotify;

# Generate a list of notification mails

my $attrs = new FormQueryPlugin::Map( join( ' ', @ARGV ));

my $web = $attrs->get( "web" );
my $query = $attrs->get( "query" );
my $debug = $attrs->get( "DEBUG" );
die "web= not found on command line" unless ( defined( $web ));
die "query= not found on command line" unless ( defined( $query ));

my ( $topic, $webName, $dummy, $userName, $dataDir) = 
    &Foswiki::initialize( "/$web", "nobody" );
$dummy = "";  # to suppress warning

my $db = new FormQueryPlugin::WebDB( $webName );

my $now = localtime( time() );
$now =~ s/(\w+)\s+(\w+)\s+(\w+)\s+([^\s]+)\s+(\w+).*/$3-$2-$5/o;

$db->_load();

if ( !Foswiki::Func::topicExists( $webName, $query )) {
  die "Query topic $webName.$query not found\n";
}

$query = Foswiki::Func::readTopicText( $web, $query );
$query =~ s/%META:\w+{.*}%//mo;

# Expand the query lines
$query = Foswiki::Func::expandCommonVariables( $query, $topic, $webName );

my %mails;
my $binpath = Foswiki::Func::getScriptUrlPath();
my $binurl = Foswiki::Func::getUrlHost() . $binpath;
my $pubpath = Foswiki::Func::getScriptUrlPath();
my $puburl = Foswiki::Func::getUrlHost() . $pubpath;

foreach my $line ( split( /\n/, $query )) {
  if ( $line =~ s/([^:]+): (.*)$/$2/o ) {
    my $name = $1;
    $name =~ s/\s+//go;
    $name = ActionTrackerPlugin::Action::_canonicalName( $name );
    my $mail = Foswiki::Func::renderText( $line, $webName );
    # make hrefs absolute
    $mail =~ s/href=\"$binpath/href=\"$binurl/go;
    $mail =~ s/(href|img)=\"$pubpath/$1=\"$puburl/go;
    $mails{$name} .= $mail;
  }
}

sendMails( $webName, \%mails );

# Given a hash keyed on the name of the owner, compose and
# send an email containing all notifications
sub sendMails {
  my ( $webName, $mails ) = @_;

  my $mailAddress = {};

  # Use the ActionTracker to recover mail addresses
  foreach my $key ( keys( %$mails )) {
    my $name = ActionTrackerPlugin::Action::_canonicalName( $key );
    ActionTrackerPlugin::ActionNotify::_getMailAddress( $name, $mailAddress )
  }
  ActionTrackerPlugin::ActionNotify::_loadWebNotifies( $mailAddress );

  foreach my $name ( keys( %mails )) {
    my $email =
      ActionTrackerPlugin::ActionNotify::_getMailAddress( $name, $mailAddress );
    if ( !defined( $email )) {
      $email = $name;
      print STDERR "Mail address for $name not found\n";
    } else {
      sendMail( $webName, $name, $email, $mails );
    }
  }
}

sub sendMail {
  my ( $webName, $name, $email, $mails ) = @_;

  my $message = $mails->{$name};
  my $sep = "=====================_64421935==_.ALT";
  my $html = "<html><body>
This is an automated notification from the $webName Web<p />

Tasks that require your attention follow:<p />

$message";
  # Now the plain-text; remove HTML tags
  my $plain = $html;
  $plain =~ s/<br( \/)?>/\n/gio;
  $plain =~ s/<p( \/)?>/\n\n/gio;
  $plain =~ s/<[^>]*>//go;
  my $mail = "From: ${webName}Management
To: $email
Subject: Outstanding tasks owned by $name
Auto-Submitted: auto-generated
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary=\"$sep\"

--$sep
Content-Type: text/plain; charset=\"us-ascii\"

$plain
--$sep
Content-Type: text/html; charset=\"us-ascii\"
Content-Transfer-Encoding: 8bit

$html
--$sep--
";

  if ( defined ( $debug )) {
    print $mail;
  } else {
    my $error = Foswiki::Net::sendEmail( $mail );
    if ( defined( $error )) {
      $error = "ActionTrackerPlugin:ActionNotify: $error";
      Foswiki::Func::writeWarning( $error );
    }
  }
}

1;

